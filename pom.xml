<!-- pom.xml -->
<!-- This is the Maven Project Object Model (POM) file for the "saga-choreography-pattern" project. -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<!--
    The project element is the root of the POM.
    It defines the basic project information and its configuration.
    -->

	<!-- Model Version -->
	<modelVersion>4.0.0</modelVersion>
	<!--
    The modelVersion element specifies the version of the POM model.
    This version should be set to 4.0.0 for the current Maven version.
    -->

	<!-- Project Packaging -->
	<packaging>pom</packaging>
	<!--
    The packaging element specifies the type of artifact generated by this project.
    In this case, it is set to "pom" because this POM serves as the parent for the modules and does not produce any specific artifact.
    -->

	<!-- Project Modules -->
	<modules>
		<!-- Define the modules (sub-projects) of the multi-module project. -->
		<module>order-service</module>
		<module>payment-service</module>
		<module>common-dtos</module>
	</modules>
	<!--
    The modules element specifies the list of sub-projects (modules) included in the multi-module project.
    Each module represents a separate Maven project within the same parent project.
    -->

	<!-- Parent Project Information -->
	<parent>
		<!-- Define the parent project's artifactId, groupId, and version. -->
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<!--
    The parent element defines the parent project from which this project will inherit settings and dependencies.
    In this case, it inherits from the Spring Boot starter parent, which provides default configurations for Spring Boot projects.
    -->

	<!-- Project Artifact Information -->
	<groupId>com.jaytech</groupId>
	<!--
    The groupId element specifies the group or organization that owns this project.
    In this case, it is "com.jaytech."
    -->

	<artifactId>saga-choreography-pattern</artifactId>
	<!--
    The artifactId element specifies the unique identifier for this project's artifact (e.g., JAR, WAR, etc.).
    In this case, it is "saga-choreography-pattern."
    -->

	<version>0.0.1-SNAPSHOT</version>
	<!--
    The version element specifies the version of this project's artifact.
    In this case, it is "0.0.1-SNAPSHOT."
    -->

	<name>saga-choreography-pattern</name>
	<!--
    The name element specifies the display name for this project.
    In this case, it is "saga-choreography-pattern."
    -->

	<description>Spring boot application to demonstrate working of kafka choreography</description>
	<!--
    The description element provides a short description of this project.
    In this case, it is "Demo project for Spring Boot."
    -->

	<!-- Project Properties -->
	<properties>
		<!--
        The properties section specifies custom properties for this project, such as Java version and Spring Cloud version.
        Property values can be referenced in other parts of the POM using the "${property}" syntax.
        -->

		<java.version>1.8</java.version>
		<!-- The java.version property specifies the Java version required for this project. -->

		<spring-cloud.version>2020.0.3</spring-cloud.version>
		<!-- The spring-cloud.version property specifies the version of Spring Cloud dependencies. -->
	</properties>
	<!--
    End of Properties Section.
    -->

	<!-- Project Dependencies -->
	<dependencies>
		<!--
        The dependencies section specifies the project's dependencies on external libraries or other projects.
        Each dependency element declares a Maven artifact with its groupId, artifactId, and version.
        -->

		<!-- Spring Boot Starter Test -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<!--
            The spring-boot-starter-test dependency includes the necessary dependencies for testing Spring Boot applications.
            It provides JUnit, Mockito, and other testing frameworks for writing and executing tests.
            It is marked with the "test" scope, meaning it is only used during testing and not included in the production build.
            -->
		</dependency>

		<!-- Project Reactor Test -->
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
			<!--
            The reactor-test dependency provides support for testing reactive applications using Project Reactor.
            It is marked with the "test" scope for testing purposes only.
            -->
		</dependency>

		<!-- Spring Cloud Stream Test -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
			<!--
            The spring-cloud-stream dependency with a "test" scope provides support for testing Spring Cloud Stream applications.
            It is used for testing Spring Cloud Stream applications that use Kafka or RabbitMQ as the message broker.
            It includes a "test-jar" classifier containing the necessary classes for testing.
            -->
		</dependency>

		<!-- Spring Kafka Test -->
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
			<!--
            The spring-kafka-test dependency provides support for testing Spring applications that use Apache Kafka.
            It includes utility classes and tools for writing Kafka-related tests.
            It is marked with the "test" scope for testing purposes only.
            -->
		</dependency>
	</dependencies>
	<!--
    End of Dependencies Section.
    -->

	<!-- Dependency Management -->
	<dependencyManagement>
		<!--
        The dependencyManagement section specifies a list of dependencies and their versions that are managed centrally.
        This allows all child modules to inherit and use the same version of a particular dependency without declaring it explicitly.
        -->

		<dependencies>
			<!-- Spring Cloud Dependencies -->
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
				<!--
                The spring-cloud-dependencies dependency imports Spring Cloud dependencies with the specified version.
                All Spring Cloud modules in the project will use the version specified in the "${spring-cloud.version}" property.
                -->
			</dependency>
		</dependencies>
	</dependencyManagement>
	<!--
    End of Dependency Management Section.
    -->

	<!-- Build Configuration -->
	<build>
		<!--
        The build section specifies the project's build configuration and plugins.
        -->

		<plugins>
			<!-- Maven Compiler Plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<!--
                The maven-compiler-plugin provides configuration for compiling Java source code.
                By default, it uses the Java version specified in the "java.version" property.
                -->
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<!--
                    The source and target elements specify the Java version to use for compilation.
                    They are set to the value of the "java.version" property (1.8) defined in the properties section.
                    -->
				</configuration>
			</plugin>

			<!-- Spring Boot Maven Plugin -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<!--
                The spring-boot-maven-plugin provides support for building Spring Boot applications with Maven.
                It allows packaging the application as an executable JAR with embedded dependencies.
                -->
				<configuration>
					<excludes>
						<!-- Exclude Lombok from the final JAR -->
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<!--
    End of Build Configuration Section.
    -->

</project>
		<!-- End of pom.xml -->
